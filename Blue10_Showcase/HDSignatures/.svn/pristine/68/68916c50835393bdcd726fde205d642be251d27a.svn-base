using HDSignatures.Logic;
using Serilog;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;

namespace HDSignatures.Data
{
    internal partial class DataManager
    {

        public static void ModifySignaturesOfAdmin(List<UserData> tempDescOfUsers)
        {
            foreach (UserData tempUserData in tempDescOfUsers)
            {
                bool blnSignatureCopied = false;
                bool blnComma = false;
                bool blnTxtCreated = false;
                bool blnRtfCreated = false;
                bool blnHtmlCreated = false;
                bool blnBestanden_filesCreated = false;
                bool blnBestanden_bestandenCreated = false;
                try
                {
                    //TXT bestanden
                    // Pad naar het Admin bestand
                    string tempAdminPathTxt = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strFilePrefix}{tempUserData.Naam.Replace(" ", "")}.txt";
                    // Pad naar de users zijn Signature bestand
                    string tempUserPathTxt = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strFilePrefix}{tempUserData.Naam.Replace(" ", "")}.txt";
                    // Pad naar het orginele bestand
                    string tempOriginelePathTxt = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strOrigineleFile}.txt";
                    if (!File.Exists(tempOriginelePathTxt))
                    {
                        Log.Error("Orginele .txt Bestand niet kunnen vinden");
                        break;
                    }

                    // Als het bestand niet bestaat maakt hij hem aan en voegt hij de orginele data erin
                    if (!File.Exists(tempUserPathTxt))
                    {
                        Console.WriteLine("\n\r");
                        Log.Information($"SIGNATURE VOOR {Settings.strAdminNaam} WORDT GEMAAKT");
                        File.Copy(tempOriginelePathTxt, tempUserPathTxt);
                        // Leest alle text die in het bestand zit
                        string tempSignatureContextTxt = File.ReadAllText(tempUserPathTxt);
                        // Veranderd de Naam, Voorletters, Mail en Functie in het bestand
                        foreach (var tempKeyValuePair in tempUserData.UserValueDictionary)
                        {
                            // Checkt of de key een mail is of niet
                            if (Regex.IsMatch(tempKeyValuePair.Key, "mail", RegexOptions.IgnoreCase) || Regex.IsMatch(tempKeyValuePair.Key, "@", RegexOptions.IgnoreCase))
                                tempSignatureContextTxt = tempSignatureContextTxt.Replace($"#{tempKeyValuePair.Key}#", tempKeyValuePair.Value.ToLower(), StringComparison.OrdinalIgnoreCase);
                            else
                                tempSignatureContextTxt = tempSignatureContextTxt.Replace($"#{tempKeyValuePair.Key}#", tempKeyValuePair.Value, StringComparison.OrdinalIgnoreCase);
                        }
                        File.WriteAllText(tempUserPathTxt, tempSignatureContextTxt);
                        blnTxtCreated = true;
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex.Message);
                }
                try
                {
                    //RTF bestanden
                    // Pad naar het Admin bestand
                    string tempAdminPathRTF = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strFilePrefix}{tempUserData.Naam.Replace(" ", "")}.rtf";
                    // Pad naar de users zijn Signature bestand
                    string tempUserPathRtf = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strFilePrefix}{tempUserData.Naam.Replace(" ", "")}.rtf";
                    // Pad naar het orginele bestand
                    string tempOriginelePathRtf = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strOrigineleFile}.rtf";
                    if (!File.Exists(tempOriginelePathRtf))
                    {
                        Log.Error("Orginele .rtf Bestand niet kunnen vinden");
                        break;
                    }
                    // Als het bestand niet bestaat maakt hij hem aan en voegt hij de orginele data erin
                    if (!File.Exists(tempUserPathRtf))
                    {
                        File.Copy(tempOriginelePathRtf, tempUserPathRtf);
                        // Leest alle text die in het bestand zit
                        string tempSignatureContextRtf = File.ReadAllText(tempUserPathRtf);
                        // Veranderd de Naam, Voorletters, Mail en Functie in het bestand
                        foreach (var tempKeyValuePair in tempUserData.UserValueDictionary)
                        {
                            if (Regex.IsMatch(tempKeyValuePair.Key, "mail", RegexOptions.IgnoreCase) || Regex.IsMatch(tempKeyValuePair.Key, "@", RegexOptions.IgnoreCase))
                            {
                                var tempValueEscaped = LogicManager.GetRtfUnicodeEscapedString(tempKeyValuePair.Value.ToLower());
                                tempSignatureContextRtf = tempSignatureContextRtf.Replace($"<{tempKeyValuePair.Key}>", tempValueEscaped, StringComparison.OrdinalIgnoreCase);
                            }
                            else
                                tempSignatureContextRtf = tempSignatureContextRtf.Replace($"<{tempKeyValuePair.Key}>", LogicManager.GetRtfUnicodeEscapedString(tempKeyValuePair.Value), StringComparison.OrdinalIgnoreCase);
                            File.WriteAllText(tempUserPathRtf, tempSignatureContextRtf);
                        }
                        blnRtfCreated = true;
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex.Message);
                }

                try
                {
                    //HTM bestanden
                    // Pad naar het Admin bestand
                    string tempAdminPathHTM = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strFilePrefix}{tempUserData.Naam.Replace(" ", "")}.htm";
                    // Pad naar de users zijn Signature bestand
                    string tempUserPathHtm = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strFilePrefix}{tempUserData.Naam.Replace(" ", "")}.htm";
                    // Pad naar het orginele bestand
                    string tempOriginelePathHtm = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strOrigineleFile}.htm";
                    if (!File.Exists(tempOriginelePathHtm))
                    {
                        Log.Error("Orginele .htm Bestand niet kunnen vinden");
                        break;
                    }
                    // Als het bestand niet bestaat maakt hij hem aan en voegt hij de orginele data erin
                    if (!File.Exists(tempUserPathHtm))
                    {
                        File.Copy(tempOriginelePathHtm, tempUserPathHtm);
                        // Leest alle text die in het bestand zit
                        string tempSignatureContextHtm = File.ReadAllText(tempUserPathHtm);
                        // Veranderd de Naam, Voorletters, Mail en Functie in het bestand
                        foreach (var tempKeyValuePair in tempUserData.UserValueDictionary)
                        {
                            // Checkt of de key een mail is of niet
                            if (Regex.IsMatch(tempKeyValuePair.Key, "mail", RegexOptions.IgnoreCase) || Regex.IsMatch(tempKeyValuePair.Key, "@", RegexOptions.IgnoreCase))
                                tempSignatureContextHtm = tempSignatureContextHtm.Replace($"#{tempKeyValuePair.Key}#", HttpUtility.HtmlEncode(tempKeyValuePair.Value).ToLower(), StringComparison.OrdinalIgnoreCase);
                            else
                                tempSignatureContextHtm = tempSignatureContextHtm.Replace($"#{tempKeyValuePair.Key}#", HttpUtility.HtmlEncode(tempKeyValuePair.Value), StringComparison.OrdinalIgnoreCase);
                        }
                        if (Settings.blnCreateFolderFiles)
                            tempSignatureContextHtm = tempSignatureContextHtm.Replace($"{Settings.strOrigineleFile}_files", $"{Settings.strFilePrefix}{HttpUtility.HtmlEncode(tempUserData.Naam).Replace(" ", "")}_files");
                        if (Settings.blnCreateFolderBestanden)
                            tempSignatureContextHtm = tempSignatureContextHtm.Replace($"{Settings.strOrigineleFile}_bestanden", $"{Settings.strFilePrefix}{HttpUtility.HtmlEncode(tempUserData.Naam).Replace(" ", "")}_bestanden");
                        File.WriteAllText(tempUserPathHtm, tempSignatureContextHtm);
                        blnHtmlCreated = true;
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(ex.Message);
                }

                try
                {
                    //_files/_bestanden directories
                    // Het pad naar de signatures zelf
                    string tempOriginalPath = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}";
                    // Het Orginele pad naar _files bestand/directory
                    string tempOriginalFolderPathFiles = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strOrigineleFile}_files";
                    // Het pad met de Users _files bestand/directory
                    string tempUserPathFile = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strFilePrefix}{tempUserData.Naam.Replace(" ", "")}_files";
                    // Het Orginele pad naar _bestanden bestand/directory
                    string tempOriginalFolderPathBestanden = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strOrigineleFile}_bestanden";
                    // het pad met de Users _bestanden bestand/directory
                    string tempUserPathBestand = $"{Settings.strSchijf}:\\{Settings.strUsersPathName}\\{Settings.strAdminNaam}\\AppData\\Roaming\\Microsoft\\{Settings.strSignatureDirectoryName}\\{Settings.strFilePrefix}{tempUserData.Naam.Replace(" ", "")}_bestanden";
                    if (Settings.blnCreateFolderFiles)
                    {
                        if (!Directory.Exists(tempOriginalFolderPathFiles))
                        {
                            Log.Error("Orginele _files Bestand niet kunnen vinden");
                            break;
                        }
                        // Checkt in de Settings.ini of Deze functie op True staat

                        // Checkt of de bestand bestaast zo niet maakt hij een nieuwe aan met alle files erin
                        if (!Directory.Exists(tempUserPathFile))
                        {
                            // Maakt de Directory
                            Directory.CreateDirectory(tempUserPathFile);
                            // Loopje om elke file in het originele bestand in de nieuw gemaakte bestand te zetten
                            foreach (string file in Directory.GetFiles(tempOriginalFolderPathFiles, "*.*", SearchOption.AllDirectories))
                            {
                                File.Copy(file, file.Replace(tempOriginalFolderPathFiles, tempUserPathFile), true);
                            }
                            blnBestanden_filesCreated = true;
                        }
                    }
                    // Checkt in de Settings.ini of Deze functie op True staat
                    if (Settings.blnCreateFolderBestanden)
                    {
                        if (!Directory.Exists(tempOriginalFolderPathBestanden))
                        {
                            Log.Error("Orginele _files Bestand niet kunnen vinden");
                            break;
                        }
                        if (!Directory.Exists(tempUserPathBestand))
                        {
                            // Maakt de Directory
                            Directory.CreateDirectory(tempUserPathBestand);
                            // Loopje om elke file in het originele bestand in de nieuw gemaakte bestand te zetten
                            foreach (string file in Directory.GetFiles(tempOriginalFolderPathBestanden, "*.*", SearchOption.AllDirectories))
                            {
                                File.Copy(file, file.Replace(tempOriginalFolderPathBestanden, tempUserPathBestand), true);
                            }
                            blnBestanden_bestandenCreated = true;
                        }
                    }
                    var tempTest = $"{tempUserData.UserName} - Volgende bestanden zijn toegevoegd: ";
                    if (blnTxtCreated)
                    {
                        tempTest += ".txt";
                        blnComma = true;
                    }
                    if (blnRtfCreated)
                    {
                        if (blnComma) tempTest += ", ";
                        tempTest += ".rtf";
                        blnComma = true;
                    }
                    if (blnHtmlCreated)
                    {
                        if (blnComma) tempTest += ", ";
                        tempTest += $".htm";
                        blnComma = true;
                    }
                    if (blnBestanden_filesCreated)
                    {
                        if (blnComma) tempTest += ", ";
                        tempTest += $"_files";
                        blnComma = true;
                    }
                    if (blnBestanden_bestandenCreated)
                    {
                        if (blnComma) tempTest += ", ";
                        tempTest += $"_bestanden";
                        blnComma = true;
                    }
                    if (blnTxtCreated || blnRtfCreated || blnHtmlCreated || blnBestanden_filesCreated || blnBestanden_bestandenCreated)
                        Log.Information(tempTest);
                    else if (!blnSignatureCopied)
                        Log.Information($"Geen nieuwe Signatures gemaakt - {tempUserData.UserName}");
                }
                catch (Exception ex)
                {
                    Log.Error(ex.Message);
                }
            }
            // Sluit de Log functie
            Log.CloseAndFlush();
        }
    }
}
