using HDSignaturesTool.Types;
using M.Core.Application.WPF.MessageBox;
using Serilog;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HDSignaturesTool.Data
{
    internal partial class DataManager
    {
        public static void ForceCreateSignatureBackup()
        {
            try
            {
                // pakt de naam van waar de applicatie is gestart
                var startupPath = Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName);

                // Maakt een Backups folder aan als die nog niet bestaat
                var tempBackupPath = Path.Combine(startupPath, "HDSignatures_TempBackups");
                if (!Directory.Exists(tempBackupPath))
                    Directory.CreateDirectory(tempBackupPath);
                else
                {   // Verwijderd de oudste backups
                    var dirs = Directory.GetDirectories(tempBackupPath).ToList();
                    DeleteOldBackups(dirs);
                }

                // Maakt de backups van vandaag folder aan als die nog niet bestaat
                var tempBackupLocationPath = Path.Combine(tempBackupPath, $"[{DateTime.Now:yyyy-MM-dd}]-Backup");
                if (!Directory.Exists(tempBackupLocationPath))
                    Directory.CreateDirectory(tempBackupLocationPath);

                // Kopieert de files naar de directoryq
                string tempPath = $"{Settings.strAdminPath}";
                string[] tempAllFiles = Directory.GetFiles(tempPath);
                foreach (var file in tempAllFiles)
                {
                    File.Copy(file, $"{tempBackupLocationPath}\\{Path.GetFileName(file)}", true);
                }

                // Maakt Directorys van de _files en/of _bestanden aan
                foreach (string dirPath in Directory.GetDirectories(tempPath, "*", SearchOption.AllDirectories))
                {
                    if (!tempBackupLocationPath.Contains(dirPath))
                        Directory.CreateDirectory(dirPath.Replace(tempPath, tempBackupLocationPath));
                }

                // Kopieert alle files die in de _files en/of _bestanden zitten
                foreach (string newPath in Directory.GetFiles(tempPath, "*.*", SearchOption.AllDirectories))
                {
                    File.Copy(newPath, newPath.Replace(tempPath, tempBackupLocationPath), true);
                }

                MBox.ShowInformation($"[{DateTime.Now:yyyy-MM-dd}]-Backup is aangemaakt/vernieuwd.");
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);
            }
        }
    }
}
