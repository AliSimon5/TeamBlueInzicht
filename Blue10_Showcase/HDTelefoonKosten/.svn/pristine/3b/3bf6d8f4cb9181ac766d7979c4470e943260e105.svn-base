using DocumentFormat.OpenXml.Office2019.Excel.RichData2;
using HDTelefoonKosten.Types;
using M.Core.Application.ControlHelpers;
using M.Core.Application.WPF.MessageBox;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace HDTelefoonKosten.Windows
{
    /// <summary>
    /// Interaction logic for TargetManagerWindow.xaml
    /// </summary>
    public partial class TargetManagerWindow : Window
    {
        public ListBoxControl<TargetType> _lbTargets;

        private List<TargetType> SelectedTargetList = new List<TargetType>();
        public TargetManagerWindow()
        {
            InitializeComponent();

            _lbTargets = new ListBoxControl<TargetType>(lbAllTargets);
            SetJsonInListBox();
        }
        public void SetJsonInListBox()
        {
            var tempAllCallData = MainWindow._listAllCallData;
            var tempTargetWithoutID = new List<TargetType>();
            var tempSavedDataFileList = DataManager.DataManager.ReadCompanyDataFile();
            List<CallData> tempCompanyWithoutInfoList = new List<CallData>();

            foreach (var tempCompany in tempAllCallData)
            {
                if (tempCompany.ID == null && tempCompany.Subscriber == tempCompany.Bedrijf)
                {
                    tempCompanyWithoutInfoList.Add(tempCompany);
                }
            }

            List<CallData> tempGroupedTargetsList = tempCompanyWithoutInfoList
              .GroupBy(p => p.Target)
              .Select(s => s.First())
              .ToList();

            foreach (var tempTarget in tempGroupedTargetsList)
            {
                var tempFoundTarget = tempSavedDataFileList.Find(x => x.CompanyName == tempTarget.Target);
                if (tempFoundTarget == null)
                    tempTargetWithoutID.Add(new TargetType() { Target = tempTarget.Target });
            }
            _lbTargets.SetItemsSource(tempTargetWithoutID);
        }
        private void btnSetTargetId_Click(object sender, RoutedEventArgs e)
        {
            SelectedTargetList = _lbTargets.GetSelections();
            var tempSavedDataFile = DataManager.DataManager.ReadCompanyDataFile();

            if (SelectedTargetList != null && SelectedTargetList.Count == 0)
            {
                MBox.ShowWarning("Selecteer eerst een Target");
                return;
            }
            foreach (var tempSelection in SelectedTargetList)
                tempSavedDataFile.Add(new CompanyMargesType() { CompanyName = tempSelection.Target, CompanyId = tbTargetId.Text });

            DataManager.DataManager.WriteCompanyDataToFile(tempSavedDataFile);
            SetJsonInListBox();
        }
    }
}
