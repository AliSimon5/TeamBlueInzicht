using HDListFolders.Data;
using HDListFolders.Logic;
using HDListFolders.Types;
using M.Core.Application.ControlHelpers;
using M.Core.Application.Settings;
using M.Core.Application.WPF.MessageBox;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace HDListFolders
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private ListBoxControl<FileData> _lbSubDirectories;
        private ListBoxControl<FileData> _lbFiles;
        DateTime dtLastModifyTime;
        int intTotalCountOfFiles = 0;


        private List<FileData> listSelectedSubDirectory = new List<FileData>();
        public MainWindow()
        {
            AutoSettings.LoadAllSettings();
            InitializeComponent();

            _lbSubDirectories = new ListBoxControl<FileData>(lbSubDirectories);
            _lbFiles = new ListBoxControl<FileData>(lbFiles);

            _lbSubDirectories.EventDoubleClick += _lbSubDirectories_EventDoubleClick;
            _lbFiles.EventDoubleClick += _lbFiles_EventDoubleClick;
            _lbSubDirectories.EventSelectionChanged += _lbSubDirectories_EventSelectionChanged;

            LoadSettings();
            
            if (tbMainPath.Text != "" && tbFilterOne.Text != "")
                btnSearch_Click(null, null);
        }

        private void _lbSubDirectories_EventSelectionChanged(object sender, List<FileData> e)
        {
            listSelectedSubDirectory.Clear();
            if (e != null)
                SetFilesInListBox(e);
            listSelectedSubDirectory.AddRange(e);
        }

        private void SetFilesInListBox(List<FileData> argSelectedSubDirectory)
        {
            List<FileData> tempFileDataList = new List<FileData>();
            foreach (var tempSubDirectory in argSelectedSubDirectory)
            {
                var tempFilesFoundInSubDirectory = DataManager.GetAllFilesFromPath(tempSubDirectory.Path);
                foreach (var tempFile in tempFilesFoundInSubDirectory)
                    tempFileDataList.Add(new FileData() { FileName = tempFile.Name, Path = tempFile.FullName, MainPath = tbMainPath.Text, FileDate = tempFile.LastWriteTime.ToString(), ShowNameOnly = (bool)cbShowOnlyFileName.IsChecked });
            }
            _lbFiles.SetItemsSource(tempFileDataList);
        }

        private void _lbSubDirectories_EventDoubleClick(object sender, FileData e)
        {
            if (e != null)
                Process.Start("explorer.exe", e.Path);
        }
        private void _lbFiles_EventDoubleClick(object sender, FileData e)
        {
            if (e != null)
                Process.Start("explorer.exe", e.Path);
        }
        private void btnRefresh_Click(object sender, RoutedEventArgs e)
        {
            btnSearch_Click(null, null);
            if (listSelectedSubDirectory.Count > 0)
                UpdateSelectedFilesListBox();
        }
        private bool CheckForChanges()
        {
            DirectoryInfo tempDirInfo = new DirectoryInfo(tbMainPath.Text);
            if (tempDirInfo.LastWriteTime != dtLastModifyTime)
                return true;

            FileInfo[] tempAllFiles = tempDirInfo.GetFiles("*.*", SearchOption.AllDirectories);
            if (tempAllFiles.Count() != intTotalCountOfFiles)
                return true;

            return false;
        }

        private void UpdateSelectedFilesListBox()
        {
            List<FileData> tempFileDataList = new List<FileData>();
            foreach (var tempSubDirectory in listSelectedSubDirectory)
            {
                var tempFilesFoundInSubDirectory = DataManager.GetAllFilesFromPath(tempSubDirectory.Path);
                foreach (var tempFile in tempFilesFoundInSubDirectory)
                    tempFileDataList.Add(new FileData() { FileName = tempFile.Name, Path = tempFile.FullName, MainPath = tbMainPath.Text, FileDate = tempFile.LastWriteTime.ToString(), ShowNameOnly = (bool)cbShowOnlyFileName.IsChecked });
            }
            _lbFiles.SetItemsSource(tempFileDataList);
        }

        private void btnSearch_Click(object sender, RoutedEventArgs e)
        {
            if (tbMainPath.Text == null)
            {
                MBox.ShowWarning("Vul eerst een Pad in");
                return;
            }
            if (!Directory.Exists(tbMainPath.Text))
            {
                MBox.ShowWarning($"{tbMainPath.Text}\nBestaat niet of is niet gevonden.");
                return;
            }

            SaveSettings();

            List<FileData> tempFileDataList = new List<FileData>();

            DirectoryInfo tempDirInfo = new DirectoryInfo(tbMainPath.Text);
            dtLastModifyTime = tempDirInfo.LastWriteTime;

            var tempAllFoundSubDirectoriesInPath = DataManager.GetAllSubDirectoriesFromPath(tbMainPath.Text);

            var tempFileCount = DataManager.GetAllFilesFromPath(tbMainPath.Text);
            intTotalCountOfFiles = tempFileCount.Count();

            var tempAllowedSubDirectories = LogicManager.FilterSubDirectoriesWithPrefix(tempAllFoundSubDirectoriesInPath, tbFilterOne.Text);

            foreach (var tempSubDir in tempAllowedSubDirectories)
            {
                tempFileDataList.Add(new FileData() { FileName = tempSubDir.Name, Path = tempSubDir.FullName , MainPath = tbMainPath.Text, FileDate = tempSubDir.LastWriteTime.ToString() });
            }
            _lbSubDirectories.SetItemsSource(tempFileDataList);
        }
        public void SaveSettings()
        {
            if (!string.IsNullOrEmpty(tbMainPath.Text))
                Settings.Path = tbMainPath.Text;

            if (!string.IsNullOrEmpty(tbFilterOne.Text))
                Settings.FilterOne = tbFilterOne.Text;

            Settings.ShowOnlyFileName = (bool)cbShowOnlyFileName.IsChecked;

            AutoSettings.SaveAllSettings();
        }
        public void LoadSettings()
        {
            if (!string.IsNullOrEmpty(Settings.Path))
                tbMainPath.Text = Settings.Path;

            if (!string.IsNullOrEmpty(Settings.FilterOne))
                tbFilterOne.Text = Settings.FilterOne;

            cbShowOnlyFileName.IsChecked = Settings.ShowOnlyFileName;
        }

        
    }
}
