using DocumentFormat.OpenXml.Spreadsheet;
using HDTelefoonKosten.Types;
using Serilog;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace HDTelefoonKosten.LogicManager
{
    internal partial class LogicManager
    {
        public static List<CallData> ParseAllRows(List<string> tempAllRowsList)
        {
            List<CallData> tempParsedRowsList = new List<CallData>();
            foreach (var Row in tempAllRowsList)
            {
                if ((Row.ToLower().StartsWith("direction".ToLower()) || Row.ToLower().StartsWith("dir".ToLower())) && !Row.ToLower().Contains("reseller".ToLower()))
                {
                    tempParsedRowsList = ParseAllRowsTypeA(tempAllRowsList);
                    break;
                }
                if (Row.ToLower().StartsWith("klant".ToLower()))
                {
                    tempParsedRowsList = ParseAllRowsTypeB(tempAllRowsList);
                    break;
                }
                if (Row.ToLower().StartsWith("YYYY".ToLower()))
                {
                    tempParsedRowsList = ParseAllRowsTypeC(tempAllRowsList);
                    break;
                }
                if (Row.ToLower().StartsWith("Enduser".ToLower()))
                {
                    tempParsedRowsList = ParseAllRowsTypeD(tempAllRowsList);
                    break;
                }
                if (Row.ToLower().StartsWith("direction".ToLower()) && Row.ToLower().Contains("reseller".ToLower()))
                {
                    tempParsedRowsList = ParseAllRowsTypeE(tempAllRowsList);
                    break;
                }
                break;

            }
            return tempParsedRowsList;
        }
        public static List<CallData> ParseAllRowsTypeA(List<string> tempAllRowsList)
        {
            int temptest = 0;
            List<CallData> tempParsedRowsList = new List<CallData>();
            try
            {
                foreach (var Row in tempAllRowsList)
                {
                    DateTime dateTime;
                    var tempRow = Row;
                    if (temptest <= 55)
                    {
                        temptest++;
                        continue;
                    }
                    if (tempRow.ToLower().Contains("direction".ToLower()) || tempRow.ToLower().Contains("dir".ToLower()) || tempRow.ToLower().Contains("subscriber".ToLower()))
                        continue;
                    if (tempRow.Contains(",,"))
                        tempRow = tempRow.Replace(",,", ",null,");
                    var tempSplitRow = Regex.Matches(tempRow, @"(?<="")[^""]+?(?=""(?:\s*?,|\s*?$))|(?<=(?:^|,)\s*?)(?:[^,""\s][^,""]*[^,""\s])|(?:[^,""\s])(?![^""]*?""(?:\s*?,|\s*?$))(?=\s*?(?:,|$))").Cast<Match>().Select(m => m.Value).ToArray();
                    if (tempSplitRow.Length == 0 || tempSplitRow.Length < 7)
                        continue;

                    if (Row.ToLower().Contains("Total".ToLower()))
                        continue;

                    CallData callData = new CallData();
                    MonthlyCostData monthlyCostData = new MonthlyCostData();
                    if (!string.IsNullOrEmpty(tempSplitRow[0]))
                        callData.Direction = tempSplitRow[0];
                    if (!string.IsNullOrEmpty(tempSplitRow[1]))
                        callData.Bedrijf = tempSplitRow[1];
                    if (!string.IsNullOrEmpty(tempSplitRow[2]))
                    {
                        callData.Subscriber = tempSplitRow[2];
                        monthlyCostData.Subscriber = tempSplitRow[2];
                    }
                    if (!string.IsNullOrEmpty(tempSplitRow[3]))
                        callData.Originator = tempSplitRow[3];
                    if (!string.IsNullOrEmpty(tempSplitRow[4]))
                        callData.Termination = tempSplitRow[4];
                    if (!string.IsNullOrEmpty(tempSplitRow[5]))
                        if (DateTime.TryParse(tempSplitRow[5], out dateTime))
                            callData.Date = dateTime;
                    if (!string.IsNullOrEmpty(tempSplitRow[6]))
                    {
                        if (!tempSplitRow[6].Contains("-"))
                            callData.Duration = double.Parse(tempSplitRow[6], CultureInfo.InvariantCulture);
                        else callData.Duration = 0;
                    }
                    if (!string.IsNullOrEmpty(tempSplitRow[7]))
                    {
                        if (!tempSplitRow[7].Contains("-"))
                            callData.Cost = double.Parse(tempSplitRow[7], CultureInfo.InvariantCulture);
                        else callData.Cost = 0;
                        tempParsedRowsList.Add(callData);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);
            }
            return tempParsedRowsList;
        }

        public static List<CallData> ParseAllRowsTypeB(List<string> tempAllRowsList)
        {
            List<CallData> tempParsedRowsList = new List<CallData>();
            try
            {
                foreach (var Row in tempAllRowsList)
                {
                    DateTime dateTime;
                    var tempRow = Row;

                    if (tempRow.Contains("direction") || tempRow.Contains("dir") || tempRow.Contains("subscriber"))
                        continue;
                    if (tempRow.Contains(",,"))
                        tempRow = tempRow.Replace(",,", ",null,");
                    var tempSplitRow = Regex.Matches(tempRow, @"(?<="")[^""]+?(?=""(?:\s*?,|\s*?$))|(?<=(?:^|,)\s*?)(?:[^,""\s][^,""]*[^,""\s])|(?:[^,""\s])(?![^""]*?""(?:\s*?,|\s*?$))(?=\s*?(?:,|$))").Cast<Match>().Select(m => m.Value).ToArray();
                    if (tempSplitRow.Length == 0 || tempSplitRow.Length < 6)
                        continue;

                    CallData callData = new CallData();
                    MonthlyCostData monthlyCostData = new MonthlyCostData();
                    if (!string.IsNullOrEmpty(tempSplitRow[0]))
                        callData.Bedrijf = tempSplitRow[0];
                    if (!string.IsNullOrEmpty(tempSplitRow[1]))
                    {
                        callData.Subscriber = tempSplitRow[1];
                        monthlyCostData.Subscriber = tempSplitRow[1];
                    }
                    if (!string.IsNullOrEmpty(tempSplitRow[2]))
                        callData.Originator = tempSplitRow[2];
                    if (!string.IsNullOrEmpty(tempSplitRow[3]))
                        callData.Termination = tempSplitRow[3];
                    if (!string.IsNullOrEmpty(tempSplitRow[4]))
                        if (DateTime.TryParse(tempSplitRow[4], CultureInfo.InvariantCulture, DateTimeStyles.None, out dateTime))
                            callData.Date = dateTime;
                    if (!string.IsNullOrEmpty(tempSplitRow[5]))
                    {
                        if (!tempSplitRow[5].Contains("-"))
                            callData.Duration = double.Parse(tempSplitRow[5], CultureInfo.InvariantCulture);
                        else callData.Duration = 0;
                    }
                    if (!string.IsNullOrEmpty(tempSplitRow[6]))
                    {
                        if (!tempSplitRow[6].Contains("-"))
                            callData.Cost = double.Parse(tempSplitRow[6], CultureInfo.InvariantCulture);
                        else callData.Cost = 0;
                        tempParsedRowsList.Add(callData);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);
            }

            return tempParsedRowsList;
        }


        public static List<CallData> ParseAllRowsTypeC(List<string> tempAllRowsList)
        {
            List<CallData> tempParsedRowsList = new List<CallData>();
            try
            {
                foreach (var Row in tempAllRowsList)
                {
                    DateTime dateTime;
                    var tempRow = Row;
                    string[] format = new string[] { "MM/dd/yyyy HH:mm" };

                    if (tempRow.ToLower().Contains("direction".ToLower()) || tempRow.ToLower().Contains("dir".ToLower()) || tempRow.ToLower().Contains("subscriber".ToLower()))
                        continue;
                    if (tempRow.Contains(",,"))
                        tempRow = tempRow.Replace(",,", ",null,");
                    var tempSplitRow = Regex.Matches(tempRow, @"(?<="")[^""]+?(?=""(?:\s*?,|\s*?$))|(?<=(?:^|,)\s*?)(?:[^,""\s][^,""]*[^,""\s])|(?:[^,""\s])(?![^""]*?""(?:\s*?,|\s*?$))(?=\s*?(?:,|$))").Cast<Match>().Select(m => m.Value).ToArray();
                    if (tempSplitRow.Length == 0 || tempSplitRow.Length < 7)
                        continue;

                    CallData callData = new CallData();
                    MonthlyCostData monthlyCostData = new MonthlyCostData();
                    if (!string.IsNullOrEmpty(tempSplitRow[2]))
                        callData.Direction = tempSplitRow[2];
                    if (!string.IsNullOrEmpty(tempSplitRow[4]))
                        callData.Bedrijf = tempSplitRow[4];
                    if (!string.IsNullOrEmpty(tempSplitRow[5]))
                    {
                        callData.Subscriber = tempSplitRow[5];
                        monthlyCostData.Subscriber = tempSplitRow[5];
                    }
                    if (!string.IsNullOrEmpty(tempSplitRow[6]))
                        callData.Originator = tempSplitRow[6];
                    if (!string.IsNullOrEmpty(tempSplitRow[7]))
                        callData.Termination = tempSplitRow[7];
                    if (!string.IsNullOrEmpty(tempSplitRow[8]))
                        if (DateTime.TryParseExact(tempSplitRow[8], "M'/'d'/'yyyy H:m",
                           CultureInfo.InvariantCulture,
                           DateTimeStyles.None, out dateTime))
                            callData.Date = dateTime;
                    if (callData.Date.Month != 10)
                    {
                        callData.Date.AddDays(1);
                    }
                    if (!string.IsNullOrEmpty(tempSplitRow[9]))
                    {
                        if (!tempSplitRow[9].Contains("-"))
                            callData.Duration = double.Parse(tempSplitRow[9], CultureInfo.InvariantCulture);
                        else callData.Duration = 0;
                    }
                    if (!string.IsNullOrEmpty(tempSplitRow[10]))
                    {
                        if (!tempSplitRow[10].Contains("-"))
                            callData.Cost = double.Parse(tempSplitRow[10], CultureInfo.InvariantCulture);
                        else callData.Cost = 0;
                        tempParsedRowsList.Add(callData);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);
            }
            return tempParsedRowsList;
        }
        public static List<CallData> ParseAllRowsTypeD(List<string> tempAllRowsList)
        {
            List<CallData> tempParsedRowsList = new List<CallData>();
            try
            {
                foreach (var Row in tempAllRowsList)
                {
                    DateTime dateTime;
                    var tempRow = Row;
                    string[] format = new string[] { "MM/dd/yyyy HH:mm" };

                    if (tempRow.ToLower().Contains("enduser".ToLower()) || tempRow.ToLower().Contains("trunk".ToLower()))
                        continue;
                    if (tempRow.Contains(",,"))
                        tempRow = tempRow.Replace(",,", ",null,");
                    var tempSplitRow = Regex.Matches(tempRow, @"(?<="")[^""]+?(?=""(?:\s*?,|\s*?$))|(?<=(?:^|,)\s*?)(?:[^,""\s][^,""]*[^,""\s])|(?:[^,""\s])(?![^""]*?""(?:\s*?,|\s*?$))(?=\s*?(?:,|$))").Cast<Match>().Select(m => m.Value).ToArray();
                    if (tempSplitRow.Length == 0 || tempSplitRow.Length < 6)
                        continue;

                    CallData callData = new CallData();
                    MonthlyCostData monthlyCostData = new MonthlyCostData();
                    if (!string.IsNullOrEmpty(tempSplitRow[0]))
                        callData.Bedrijf = tempSplitRow[0];
                    if (!string.IsNullOrEmpty(tempSplitRow[1]))
                    {
                        callData.Subscriber = tempSplitRow[1];
                        monthlyCostData.Subscriber = tempSplitRow[1];
                    }
                    if (!string.IsNullOrEmpty(tempSplitRow[2]))
                        callData.Originator = tempSplitRow[2];
                    if (!string.IsNullOrEmpty(tempSplitRow[3]))
                        callData.Termination = tempSplitRow[3];
                    if (!string.IsNullOrEmpty(tempSplitRow[4]))
                        if (DateTime.TryParseExact(tempSplitRow[4], "M'/'d'/'yyyy H:m",
                           CultureInfo.InvariantCulture,
                           DateTimeStyles.None, out dateTime))
                            callData.Date = dateTime;
                    if (!string.IsNullOrEmpty(tempSplitRow[5]))
                    {
                        if (!tempSplitRow[5].Contains("-"))
                            callData.Duration = double.Parse(tempSplitRow[5], CultureInfo.InvariantCulture);
                        else callData.Duration = 0;
                    }
                    if (!string.IsNullOrEmpty(tempSplitRow[6]))
                    {
                        if (!tempSplitRow[6].Contains("-"))
                            callData.Cost = double.Parse(tempSplitRow[6], CultureInfo.InvariantCulture);
                        else callData.Cost = 0;
                        tempParsedRowsList.Add(callData);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);
            }
            return tempParsedRowsList;
        }


        public static List<CallData> ParseAllRowsTypeE(List<string> tempAllRowsList)
        {
            List<CallData> tempParsedRowsList = new List<CallData>();
            try
            {
                foreach (var Row in tempAllRowsList)
                {
                    DateTime dateTime;
                    var tempRow = Row;

                    if (tempRow.ToLower().Contains("direction".ToLower()) || tempRow.ToLower().Contains("dir".ToLower()) || tempRow.ToLower().Contains("subscriber".ToLower()))
                        continue;
                    if (tempRow.Contains(",,"))
                        tempRow = tempRow.Replace(",,", ",null,");
                    var tempSplitRow = Regex.Matches(tempRow, @"(?<="")[^""]+?(?=""(?:\s*?,|\s*?$))|(?<=(?:^|,)\s*?)(?:[^,""\s][^,""]*[^,""\s])|(?:[^,""\s])(?![^""]*?""(?:\s*?,|\s*?$))(?=\s*?(?:,|$))").Cast<Match>().Select(m => m.Value).ToArray();
                    if (tempSplitRow.Length == 0 || tempSplitRow.Length < 7)
                        continue;

                    CallData callData = new CallData();
                    MonthlyCostData monthlyCostData = new MonthlyCostData();
                    if (!string.IsNullOrEmpty(tempSplitRow[0]))
                        callData.Direction = tempSplitRow[0];
                    if (!string.IsNullOrEmpty(tempSplitRow[2]))
                        callData.Bedrijf = tempSplitRow[2];
                    if (!string.IsNullOrEmpty(tempSplitRow[3]))
                    {
                        callData.Subscriber = tempSplitRow[3];
                        monthlyCostData.Subscriber = tempSplitRow[3];
                    }
                    if (!string.IsNullOrEmpty(tempSplitRow[4]))
                        callData.Originator = tempSplitRow[4];
                    if (!string.IsNullOrEmpty(tempSplitRow[5]))
                        callData.Termination = tempSplitRow[5];
                    if (!string.IsNullOrEmpty(tempSplitRow[6]))
                        if (DateTime.TryParseExact(tempSplitRow[6], "M'/'d'/'yyyy H:m",
                           CultureInfo.InvariantCulture,
                           DateTimeStyles.None, out dateTime))
                            callData.Date = dateTime;
                    if (!string.IsNullOrEmpty(tempSplitRow[7]))
                    {
                        if (!tempSplitRow[7].Contains("-"))
                            callData.Duration = double.Parse(tempSplitRow[7], CultureInfo.InvariantCulture);
                        else callData.Duration = 0;
                    }
                    if (!string.IsNullOrEmpty(tempSplitRow[8]))
                    {
                        if (!tempSplitRow[8].Contains("-"))
                            callData.Cost = double.Parse(tempSplitRow[8], CultureInfo.InvariantCulture);
                        else callData.Cost = 0;
                        tempParsedRowsList.Add(callData);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);
            }
            return tempParsedRowsList;
        }
    }
}